'use strict';

angular.module('snaplab', [
    'ui.bootstrap',
    'ui.router',
    'ui.toggle',
    'ui.sortable',
    'snaplab.investigations',
    'snaplab.design',
    'snaplab.notification',
    'snaplab.navigation',
    'snaplab.carousel',
    'snaplab.modal',
    'snaplab.auth',
    'snaplab.myworks',
    'snaplab.profile',
    'snaplab.about',
    'snaplab.welcome',
    'snaplab.download'
]);




'use strict';

angular.module('snaplab').config(function($stateProvider, $urlRouterProvider) {
    var states = [
        {
            name: 'welcome',
            url: '/welcome',
            component: 'welcome'
        },
        {
            name: 'investigations',
            url: '/investigations',
            component: 'investigationsFinder'
        },
        {
            name: 'about',
            url: '/about',
            component: 'about'
        },
        {
            name: 'design',
            url: '/design',
            component: 'design'
        },
        {
            name: 'design.quick',
            url: '/quick/:id',
            component: 'designQuick'
        },
        {
            name: 'design.detail',
            url: '/detail/:id',
            component: 'designDetail'
        },
        {
            name: 'download',
            url: '/download',
            component: 'download'
        },
        {
            name: 'signin',
            url: '/signin',
            component: 'signin'
        },
        {
            name: 'signup',
            url: '/signup',
            component: 'signup'
        },
        {
            name: 'forget',
            url: '/forget',
            component: 'forget'
        },
        {
            name: 'reset',
            url: '/reset',
            component: 'reset'
        },
        {
            name: 'profile',
            url: '/profile',
            component: 'profile'
        },
        {
            name: 'myworks',
            url: '/myworks',
            component: 'myworks'
        },
        {
            name: 'edit',
            url: '/edit/:id',
            component: 'myworksEdit'
        }
    ];

    states.forEach(function(state){
        $stateProvider.state(state);
    });

    $urlRouterProvider.otherwise('/welcome');
});
'use strict';

angular.module('snaplab').run(['$rootScope', '$transitions', 'auth', '$uibModal', function($rootScope, $transitions, auth, $uibModal){
    $rootScope.isLogin = auth.isLoggedIn();

    function popNewAlert(content) {
        var modalInstance = $uibModal.open({
            animation: true,
            ariaLabelledBy: 'modal-title',
            ariaDescribedBy: 'modal-body',
            templateUrl: 'components/modal/modal.template.html',
            controller: 'AlertModalInstanceCtrl',
            controllerAs: '$ctrl',
            size: 'sm',
            resolve: {
                content: function () {
                    return content;
                }
            }
        });

        modalInstance.result
            .then(
                function closeDone() {
                },
                function dismissDone() {
                    console.log('Modal dismissed at: ' + new Date());
                }
            );
    };

    // filter pre-login page transitions
    $transitions.onStart({ to: 'investigations.**' }, function(trans) {
        if (!$rootScope.isLogin) {
            popNewAlert('Sign In first');
            return trans.router.stateService.target('signin');
        }
    });

    $transitions.onStart({ to: 'design.**' }, function(trans) {
        if (!$rootScope.isLogin) {
            popNewAlert('Sign In first');
            return trans.router.stateService.target('signin');
        }
    });

    $transitions.onStart({ to: 'profile.**' }, function(trans) {
        if (!$rootScope.isLogin) {
            popNewAlert('Sign In first');
            return trans.router.stateService.target('signin');
        }
    });

    $transitions.onStart({ to: 'myworks.**' }, function(trans) {
        if (!$rootScope.isLogin) {
            popNewAlert('Sign In first');
            return trans.router.stateService.target('signin');
        }
    });

    $transitions.onStart({ to: 'signin.**' }, function(trans) {
        if ($rootScope.isLogin) {
            popNewAlert('Have Sign In');
            return trans.router.stateService.target('welcome');
        }
    });

}]);
'use strict';

angular.module('snaplab.core.auth', []);
'use strict';

angular.module('snaplab.core.auth').service('auth', ['$http', '$window', '$rootScope', function ($http, $window, $rootScope) {

    var payload;
    var token;

    var isLoggedIn = function() {

        if(!token){
            getToken();
        }

        if(token){
            payload = token.split('.')[1];
            payload = $window.atob(payload);
            payload = JSON.parse(payload);
            return payload.exp > Date.now() / 1000;
        } else {
            return false;
        }
    };

    var getLoginUser = function() {
        console.log(payload);
        var user = {};
        user.email = payload.email;
        user.name = payload.name;
        user.id = payload._id;
        return user;
    }

    var genHeader = function() {
        if(angular.isUndefined(token)){
            getToken();
        }
        return {Authorization: 'Bearer '+ token};
    }

    var saveToken = function (token) {
        if(token){
            payload = token.split('.')[1];
            payload = $window.atob(payload);
            payload = JSON.parse(payload);
        }
        $window.localStorage['mean-token'] = token;
    };

    var getToken = function () {
        token = $window.localStorage['mean-token'];
        return token;
    };

    var logout = function () {
        $window.localStorage.removeItem('mean-token');
        $rootScope.addAlert({ type:'success', msg:'Logout Success' });
    };

    return {
        saveToken: saveToken,
        getToken: getToken,
        logout: logout,
        isLoggedIn: isLoggedIn,
        getLoginUser: getLoginUser,
        genHeader: genHeader
    };
}]);



'use strict';

angular.module('snaplab.about', []);
'use strict';

angular.module('snaplab.about')
.component('about', {
    templateUrl:'components/about/about.template.html',
});
'use strict';

angular.module('snaplab.auth', [
    'snaplab.core.auth',
    'ui.router'
]);
'use strict';

angular.module('snaplab.auth')
.component('signup',{
    templateUrl: 'components/auth/auth-signup.template.html',
    controller: ['$rootScope', '$http','$state', function ($rootScope, $http, $state) {
        this.signUp = function() {
            var self = this;

            if(self.password && self.password == self.repassword && self.email){
                $http.post('auth/signup', {email: self.email, password: self.password})
                    .then(
                        function successCallback(response) {
                            $state.go('signin');
                            $rootScope.addAlert({ type:'success', msg: response.data.message });
                        },
                        function failCallback(response) {
                            $rootScope.addAlert({ type:'danger', msg: response.data.message });
                        }
                    )
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Sign Up Information Incorrect' });
            }
        }
    }]
});
'use strict';

angular.module('snaplab.auth')
.component('signin',{
    templateUrl: 'components/auth/auth-signin.template.html',
    controller: ['$rootScope', '$http', 'auth','$state', function ($rootScope, $http, auth, $state) {
        var self = this;

        self.signIn = function() {
            var validJudgement = angular.isDefined(self.email) && angular.isDefined(self.password);
            if(validJudgement){
                $http.post('auth/signin', {email: self.email, password: self.password})
                    .then(
                        function successCallback(response) {
                            auth.saveToken(response.data.data.token);
                            $rootScope.isLogin = true;
                            $rootScope.user = auth.getLoginUser();
                            $rootScope.addAlert({ type:'success', msg: response.data.message });
                            $state.go('welcome');
                        },
                        function failCallback(response) {
                            $rootScope.addAlert({ type:'danger', msg:response.data.message });
                        })
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Sign In Information Incomplete' });
            }
        }
    }]
});
'use strict';

angular.module('snaplab.auth')
.component('reset', {
    templateUrl:'components/auth/auth-reset.template.html',
    controller: ['$rootScope', '$http', 'auth', '$state', function ($rootScope, $http, auth, $state) {
        var self = this;

        self.resetpw = function() {
            var validJudgement = angular.isDefined(self.token) && angular.isDefined(self.password);
            if(validJudgement){
                $http.post('auth/reset', {token: self.token, password: self.password})
                    .then(
                        function successCallback(response) {
                            $state.go('welcome');
                            $rootScope.addAlert({ type:'success', msg: response.data.message });
                        },
                        function failCallback(response) {
                            $rootScope.addAlert({ type:'danger', msg: response.data.message });
                        })
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Send Reset Request Incomplete' });
            }
        }
    }]
});
'use strict';

angular.module('snaplab.auth')
.component('forget', {
    templateUrl: 'components/auth/auth-forget.template.html',
    controller: ['$rootScope', '$http', 'auth','$state', function ($rootScope, $http, auth, $state) {
        var self = this;

        self.forgetpw = function() {

            var validJudgement = angular.isDefined(self.email);
            if(validJudgement){
                $http.post('auth/forget', {email: self.email})
                    .then(
                        function successCallback(response) {
                            $state.go('reset');
                            $rootScope.addAlert({ type:'success', msg: response.data.message });
                        },
                        function failCallback(response) {
                            $rootScope.addAlert({ type:'danger', msg: response.data.message });
                        });
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Send Forget Request Incomplete' });
            }
        }
    }]
});
'use strict';

angular.module('snaplab.carousel', []);
'use strict';

angular.module('snaplab.carousel')
.component('carousel', {
    templateUrl: 'components/carousel/carousel.template.html',
    controller: function () {
        var self = this;

        self.myInterval = 5000;
        self.noWrapSlides = false;
        self.active = 0;
        self.slides = [
            {
                image: '/images/asell-schools-button.jpg',
                text: 'asell-schools-button',
                id: 0
            },
            {
                image: '/images/asell-uni-button.jpg',
                text: 'asell-uni-button',
                id: 1
            }
        ];
    }
});
'use strict';

angular.module('snaplab.design', [
    'snaplab.core.auth',
    'ui.router'
]);
angular.module('snaplab.design')
    .component('design', {
        templateUrl: 'components/design/design.template.html',
        controller: ['$scope', '$state', function($scope, $state) {
            $scope.navPoint = true;
            $scope.$watch(function(){
                return $state.$current.name
            }, function(newVal, oldVal) {
                if(newVal == 'design.quick'){
                    $scope.navPoint = true;
                }else if(newVal == 'design.detail'){
                    $scope.navPoint = false;
                }
            })
        }]
    });
(function(window, angular) {'use strict';

angular.module('snaplab.design')
    .component('designQuick', {
        templateUrl: 'components/design/design-quick.template.html',
        controller: ['$rootScope', '$http', 'auth', '$state','$uibModal', designController]
    });

function loadDraggableBlocks(self, defaultSensorTag, popNewAlert){
    self.quickDesignBlock = [];

    self.TemperatureBlock = [
        { class:'Temperature', type:'Graph', name:'Temperature Graph &nbsp;', url:'images/graphicon.png', tunable:true, parameters: [{field:'Temperature.graph.display', value:true}]},
        { class:'Temperature', type:'Data', name:'Temperature Data &nbsp;', url:'images/dataicon.jpg', tunable:true, parameters: [{field:'Temperature.data.display', value:true}]},
        { class:'Temperature', type:'Grid', name:'4x4 Temperature Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Temperature.grid.columns', value:4}, {field:'Temperature.grid.rows', value:4}, {field:'Temperature.grid.display', value:true}]}
    ];

    self.HumidityBlock = [
        { class:'Humidity', type:'Graph', name:'Humidity Graph &nbsp;', url:'images/graphicon.png', tunable:true, parameters: [{field:'Humidity.graph.display', value:true}]},
        { class:'Humidity', type:'Data', name:'Humidity Data Only', url:'images/dataicon.jpg', parameters: [{field:'Humidity.data.display', value:true}]},
        { class:'Humidity', type:'Grid', name:'4x4 Humidity Grid &nbsp;', url:'images/gridicon.png', tunable:true, parameters: [{field:'Humidity.grid.columns', value:4}, {field:'Humidity.grid.rows', value:4}, {field:'Humidity.grid.display', value:true}]}
    ];

    self.BarometerBlock = [
        { class:'Barometer', type:'Graph', name:'Barometer Graph &nbsp;', url:'images/graphicon.png', tunable:true, parameters: [{field:'Barometer.graph.display', value:true}]},
        { class:'Barometer', type:'Data', name:'Barometer Data &nbsp;', url:'images/dataicon.jpg', parameters: [{field:'Barometer.data.display', value:true}]},
        { class:'Barometer', type:'Grid', name:'4x4 Barometer Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Barometer.grid.columns', value:4}, {field:'Barometer.grid.rows', value:4}, {field:'Barometer.grid.display', value:true}]}
    ];

    self.AccelerometerBlock = [
        { class:'Accelerometer', type:'Graph', name:'Accelerometer Graph', url:'images/graphicon.png', tunable:true, parameters: [{field:'Accelerometer.graph.display', value:true}]},
        { class:'Accelerometer', type:'Data', name:'Accelerometer Data Only', url:'images/dataicon.jpg', tunable:true, parameters: [{field:'Accelerometer.data.display', value:true}]},
        { class:'Accelerometer', type:'Grid', name:'4x4 Accelerometer Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Accelerometer.grid.columns', value:4}, {field:'Accelerometer.grid.rows', value:4}, {field:'Accelerometer.grid.display', value:true}]}
    ];

    self.GyroscopeBlock = [
        { class:'Gyroscope', type:'Graph', name:'Gyroscope Graph &nbsp;', url:'images/graphicon.png', tunable:true, parameters: [{field:'Gyroscope.graph.display', value:true}]},
        { class:'Gyroscope', type:'Data', name:'Gyroscope Data &nbsp;', url:'images/dataicon.jpg', parameters: [{field:'Gyroscope.data.display', value:true}]},
        { class:'Gyroscope', type:'Grid', name:'4x4 Gyroscope Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Gyroscope.grid.columns', value:4}, {field:'Gyroscope.grid.rows', value:4}, {field:'Gyroscope.grid.display', value:true}]}
    ];

    self.MagnetometerBlock = [
        { class:'Magnetometer', type:'Graph', name:'Magnetometer Graph', url:'images/graphicon.png', tunable:true, parameters: [{field:'Magnetometer.graph.display', value:true}]},
        { class:'Magnetometer', type:'Data', name:'Magnetometer Data', url:'images/dataicon.jpg', tunable:true, parameters: [{field:'Magnetometer.data.display', value:true}]},
        { class:'Magnetometer', type:'Grid', name:'4x4 Magnetometer Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Magnetometer.grid.columns', value:4}, {field:'Magnetometer.grid.rows', value:4}, {field:'Magnetometer.grid.display', value:true}]}
    ];

    self.LuxometerBlock = [
        { class:'Luxometer', type:'Graph', name:'Luxometer Graph &nbsp;', url:'images/graphicon.png', tunable:true, parameters: [{field:'Luxometer.graph.display', value:true}]},
        { class:'Luxometer',type:'Data', name:'Luxometer Data &nbsp;', url:'images/dataicon.jpg', parameters: [{field:'Luxometer.data.display', value:true}]},
        { class:'Luxometer', type:'Grid', name:'4x4 Luxometer Grid', url:'images/gridicon.png', tunable:true, parameters: [{field:'Luxometer.grid.columns', value:4}, {field:'Luxometer.grid.rows', value:4}, {field:'Luxometer.grid.display', value:true}]}
    ];

    self.sortableOptions = {
        connectWith: ".qd",

        update: function(e, ui) {
            if(!ui.item.sortable.received){
                if(ui.item.sortable.sourceModel == self.quickDesignBlock){
                    popNewAlert('moving out of quick panel is forbidden');
                    ui.item.sortable.cancel();
                }
                if(ui.item.sortable.droptargetModel == self.quickDesignBlock){
                    var sourceModel = ui.item.sortable.sourceModel;
                    var numOfGraphOrGrid = sourceModel.filter(function(item) {
                        var hasGraph = item.name.indexOf('Graph')>=0;
                        var hasGrid = item.name.indexOf('Grid')>=0;
                        return hasGraph||hasGrid;
                    }).length;
                    if(numOfGraphOrGrid<2 && 
                        (ui.item.sortable.model.name.indexOf('Grid')>=0 
                        || ui.item.sortable.model.name.indexOf('Graph')>=0)){
                        popNewAlert('Only one can be selected from Graph and Grid.');
                        ui.item.sortable.cancel();
                    }
                    console.log('move in');
                }
            }else{//received
            
            }
        }
    };
}

function createDefaultSensorTag() {
    var defaultSensorTag = {
        "connect" : true,
        "title" : "SensorTag",
        "sensors" : {
            "Gyroscope" : {
                "grid" : {
                    "gridTitle" : "Gyroscope Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "data" : {
                    "display" : false,
                    "label" : "Gyroscope"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Gyroscope Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Gyroscope"
                },
                "captureOnClick" : false
            },
            "Temperature" : {
                "data" : {
                    "display" : false,
                    "label" : "Temperature"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Temperature Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Temperature"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Temperature Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "ambient" : false,
                    "IR" : false
                }
            },
            "Humidity" : {
                "data" : {
                    "display" : false,
                    "label" : "Humidity"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Humidity Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Humidity"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Humidity Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            },
            "Barometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Barometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Barometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Barometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Barometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            },
            "Accelerometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Accelerometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Accelerometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Accelerometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Accelerometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "xyz" : false,
                    "scalar" : false
                }
            },
            "Magnetometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Magnetometer"
                },
                "graph" : {
                    "display" : false,
                    "graphType" : "spline",
                    "graphTitle" : "Magnetometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Magnetic Flux (microT)"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Magnetometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "xyz" : false,
                    "scalar" : false
                }
            },
            "Luxometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Luxometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Luxometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Luxometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Luxometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            }
        }
    };

    return defaultSensorTag;
}

function designController($rootScope, $http, auth, $state, $uibModal) {

        var self = this;

        var defaultSensorTag;
        if($state.params.id != '0'){

            //TODO: wait for api
        } 
        else{
            defaultSensorTag = createDefaultSensorTag();
        };

        function popNewAlert(content) {
            var modalInstance = $uibModal.open({
                animation: true,
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                templateUrl: 'components/modal/modal.template.html',
                controller: 'AlertModalInstanceCtrl',
                controllerAs: '$ctrl',
                size: 'sm',
                resolve: {
                    content: function () {
                        return content;
                    }
                }
            });
    
            modalInstance.result
                .then(
                    function closeDone() {
                    },
                    function dismissDone() {
                        console.log('Modal dismissed at: ' + new Date());
                    }
                );
        };

        function popTuneWindow(item){
            var templateBaseUrl = 'components/modal/';
            var templateUrl;
            switch(item.type){
                case 'Data': templateUrl = templateBaseUrl + 'tune-modal-data.template.html';break;
                case 'Grid': templateUrl = templateBaseUrl + 'tune-modal-grid.template.html';break;
                case 'Graph': templateUrl = templateBaseUrl + 'tune-modal-graph.template.html';break;
            }
            var modalInstance = $uibModal.open({
                animation: true,
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                templateUrl: templateUrl,
                controller: 'TuneModalInstanceCtrl',
                controllerAs: '$ctrl',
                resolve: {
                    item: function () {
                        return item;
                    }
                }
            });


            modalInstance.result
            .then(
                function closeDone() {
                },
                function dismissDone() {
                    console.log('Modal dismissed at: ' + new Date());
                }
            );
        }

        loadDraggableBlocks(self, defaultSensorTag, popNewAlert);

        /*
        * return block back to origin
        */
        self.returnBack = function(item) {
            var indexInQuick = self.quickDesignBlock.indexOf(item);
            self.quickDesignBlock.splice(indexInQuick,1);
            var classification = item.class+'Block';
            self[classification].push(item);
        }

        self.tune = function(item) {

            console.log(item);
            popTuneWindow(item);
        }

        self.expTitle = 'SensorTag Investigation';
        self.sampleInterval = 1000;
        self.sampleRateStr = 'select';
        self.allowDataStorage = false;
        self.allowVideo = false;
        self.autoStartGraphs = false;

        self.sensorTag = [];
        self.sensorTag.push(defaultSensorTag);
        self.setSampleRate = function(data, str){
            self.sampleRateStr = str;
            self.sampleInterval = 1000/data;
        }
        self.store = function(){
            var expCfg = {};
            expCfg.videoAllowed = self.allowVideo;
            expCfg.videoPrefix = self.expTitle + 'Video';
            expCfg.dataStorageAllowed = self.allowDataStorage;
            expCfg.dataStoragePrefix = self.expTitle + 'Data';
            expCfg.graphAutoStart = self.autoStartGraphs;
            expCfg.labTitle = self.expTitle;
            expCfg.sampleInterval = self.sampleInterval;
            expCfg.description = self.expDesc;
            expCfg.isPublished = self.isPublished || false;
            var sensorTagDict = {};
            for(var i in self.sensorTag){
                sensorTagDict[i] = self.sensorTag[i]
            }
            expCfg.sensorTags = sensorTagDict;
            self.quickDesignBlock.forEach(function(block) {
                var parameters = block.parameters;
                parameters.forEach(function(parameter){
                    console.log('parameter: ', parameter);
                    var splits = parameter.field.split('.');
                    if(splits.length == 3){
                        defaultSensorTag.sensors[splits[0]][splits[1]][splits[2]] = parameter.value;
                    }else if(splits.length == 2){
                        defaultSensorTag.sensors[splits[0]][splits[1]] = parameter.value;
                    }
                });
            });
            var user = auth.getLoginUser();
            expCfg.createdBy = user.id;

            var postCfg = {};
            postCfg.headers = auth.genHeader(auth.getToken());

            console.log('expCfg', expCfg);

            if(expCfg.description && expCfg.labTitle){
                $http.post('experiments/user/' + user.id, expCfg, postCfg)
                    .then(
                        function successCallback(successResponse){
                            window.location.href = "/#!/";
                            $rootScope.addAlert({ type:'success', msg: successResponse.data.message});
                        },
                        function failCallback(failResponse){
                            $rootScope.addAlert({ type:'danger', msg: successResponse.data.message })
                        });
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Experiment Info Incomplete' });
            }
        }
    }
})(window, angular);
(function(window, angular) {'use strict';

angular.module('snaplab.design')
    .component('designDetail', {
        templateUrl: 'components/design/design-detail.template.html',
        controller: ['$scope', '$rootScope', '$http', 'auth', '$state', designController],
        bindings: {
            noTitle: '@'
        }
    });

function createDefaultSensorTag() {
    var defaultSensorTag = {
        "connect" : true,
        "title" : "SensorTag",
        "sensors" : {
            "Gyroscope" : {
                "grid" : {
                    "gridTitle" : "Gyroscope Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "data" : {
                    "display" : false,
                    "label" : "Gyroscope"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Gyroscope Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Gyroscope"
                },
                "captureOnClick" : false
            },
            "Temperature" : {
                "data" : {
                    "display" : false,
                    "label" : "Temperature"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Temperature Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Temperature"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Temperature Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "ambient" : false,
                    "IR" : false
                }
            },
            "Humidity" : {
                "data" : {
                    "display" : false,
                    "label" : "Humidity"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Humidity Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Humidity"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Humidity Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            },
            "Barometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Barometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Barometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Barometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Barometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            },
            "Accelerometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Accelerometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Accelerometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Accelerometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Accelerometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "xyz" : false,
                    "scalar" : false
                }
            },
            "Magnetometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Magnetometer"
                },
                "graph" : {
                    "display" : false,
                    "graphType" : "spline",
                    "graphTitle" : "Magnetometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Magnetic Flux (microT)"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Magnetometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                },
                "parameters" : {
                    "xyz" : false,
                    "scalar" : false
                }
            },
            "Luxometer" : {
                "data" : {
                    "display" : false,
                    "label" : "Luxometer"
                },
                "graph" : {
                    "display":false,
                    "graphType" : "spline",
                    "graphTitle" : "Luxometer Graph",
                    "graphXAxis" : "Time (s)",
                    "graphYAxis" : "Luxometer"
                },
                "captureOnClick" : false,
                "grid" : {
                    "gridTitle" : "Luxometer Grid",
                    "display" : false,
                    "columns" : "4",
                    "rows" : "4"
                }
            }
        }
    };

    return defaultSensorTag;
}

function transferToCfg($scope) {
    var expCfg = {};
    expCfg.videoAllowed = $scope.allowVideo;
    expCfg.videoPrefix = $scope.expTitle + 'Video';
    expCfg.dataStorageAllowed = $scope.allowDataStorage;
    expCfg.dataStoragePrefix = $scope.expTitle + 'Data';
    expCfg.graphAutoStart = $scope.autoStartGraphs;
    expCfg.labTitle = $scope.expTitle;
    expCfg.sampleInterval = $scope.sampleInterval;
    expCfg.description = $scope.expDesc;
    expCfg.isPublished = $scope.isPublished || false;
    var sensorTagDict = {};
    for(var i in $scope.sensorTag){
        sensorTagDict[i] = $scope.sensorTag[i]
    }
    expCfg.sensorTags = sensorTagDict;
    return expCfg;
}

function designController($scope, $rootScope, $http, auth, $state) {

        var self = this;

        var defaultSensorTag;
        var expId = $state.params.id;

        self.$onInit = function() {
            // console.log('out --');
            // console.log(this.noTitle);
            // if(this.noTitle == 'false'){
            //     $scope.noTitle == false;
            //     console.log('in --');
            // }
            console.log(this.noTitle);
        }

        $scope.sensorTag = [];
        if(expId != '0'){
            $scope.saveOrUpdate = 'Update';
            $http.get('experiments/' + expId)
                .then(
                    function successCallBack(response){
                        var wrap = response.data;
                        defaultSensorTag = wrap.data.sensorTags[0];
                        console.log(wrap.data);
                        for(var i in wrap.data.sensorTags){
                            $scope.sensorTag[i] = wrap.data.sensorTags[i];
                        }

                        console.log($scope.sensorTag);
                        $scope.expTitle = wrap.data.labTitle;
                        $scope.expDesc = wrap.data.description;
                        $scope.sampleInterval = parseInt(wrap.data.sampleInterval);
                        $scope.sampleRateStr = 'select';
                        $scope.allowDataStorage = wrap.data.dataStorageAllowed;
                        $scope.allowVideo = wrap.data.videoAllowed;
                        $scope.autoStartGraphs = wrap.data.graphAutoStart;
                        $scope.isPublished = wrap.data.isPublished;
                    },
                    function failCallback(response){
                        console.log(response);
                    }
                );
        } 
        else{
            $scope.saveOrUpdate = 'Save';
            defaultSensorTag = createDefaultSensorTag();
            $scope.sensorTag.push(defaultSensorTag);

            $scope.expTitle = 'SensorTag Investigation';
            $scope.sampleInterval = 1000;
            $scope.sampleRateStr = 'select';
            $scope.allowDataStorage = false;
            $scope.allowVideo = false;
            $scope.autoStartGraphs = false;
        };


        $scope.setSampleRate = function(data, str){
            $scope.sampleRateStr = str;
            $scope.sampleInterval = 1000/data;
        }
        $scope.duplicate = function(data){
            var newSensorTag = JSON.parse(JSON.stringify(data));
            $scope.sensorTag.push(newSensorTag);
        }
        $scope.store = function(saveOrUpdate){
            var expCfg = transferToCfg($scope)

            console.log(expCfg);
            var user = auth.getLoginUser();
            expCfg.createdBy = user.id;

            var postCfg = {};
            postCfg.headers = auth.genHeader();

            if(expCfg.description && expCfg.labTitle){
                console.log(expCfg);
                if(saveOrUpdate == 'Save'){
                    $http.post('experiments/user/' + user.id, expCfg, postCfg)
                    .then(
                        function successCallback(successResponse){
                            $state.go('welcome');
                            $rootScope.addAlert({ type:'success', msg: successResponse.data.message });
                        },
                        function failCallback(failResponse){
                            $rootScope.addAlert({ type:'danger', msg: successResponse.data.message })
                        });
                }else if(saveOrUpdate == 'Update'){
                    $http.put('experiments/' + expId, expCfg, postCfg)
                    .then(
                        function successCallback(successResponse){
                            $state.go('welcome');
                            $rootScope.addAlert({ type:'success', msg: successResponse.data.message });
                        },
                        function failCallback(failResponse){
                            $rootScope.addAlert({ type:'danger', msg: successResponse.data.message })
                        });
                }
            
                
            }else{
                $rootScope.addAlert({ type:'danger', msg:'Experiment Info Incomplete' });
            }
        }
    }
})(window, angular);

'use strict';

angular.module('snaplab.download', []);
'use strict';

angular.module('snaplab.download')
.component('download', {
    templateUrl:'components/download/download.template.html'
});
'use strict';

angular.module('snaplab.investigations', [
    'snaplab.core.auth',
    'ui.router'
]);
'use strict';

angular.module('snaplab.investigations')
.component('investigationsList', {
    templateUrl: 'components/investigations/investigations-list.template.html',
    require: {
        finderCtrl: '?^investigationsFinder'
    },
    bindings:{
        initData:'<',
        isolated:"@"
    },
    controller: ['$rootScope', '$http', 'auth','$state','$uibModal', function ($rootScope, $http, auth, $state, $uibModal) {

        var self = this;
        var user = auth.getLoginUser();

        function loadList(self, data){
            self.list = data.data;
            self.totalItems = data.data.length;
            self.currentPage = 1;
            self.maxSize = 5;

            self.currentList = [];
            for (var i = 0; i < 10 && i < self.totalItems; i++) {
                self.currentList.push(self.list[i]);
            }
        }

        self.$onChanges = function(changesObj){

            console.log(changesObj);
            // filter change of data from search result
            if(!angular.isUndefined(changesObj.initData) && !angular.isUndefined(self.initData)){
                var response = self.initData;
                loadList(self, response);
            }
        };

        self.$onInit = function() {
            if (self.isolated == "true") {
                var httpCfg = {};
                httpCfg.headers = auth.genHeader();
                $http.get('experiments/user/' + user.id, httpCfg)
                    .then(function (response) {
                        loadList(self, response.data);
                    });
            } else {
                console.log("not isolated");
            }
        }


        self.pageChanged = function () {
            self.currentList = [];
            for (var i = (self.currentPage - 1) * 10; i < self.currentPage * 10 && i < self.totalItems; i++) {
                self.currentList.push(self.list[i]);
            }
        };

        self.remove = function(item) {
            console.log('remove');

            var httpCfg = {};
            httpCfg.headers = auth.genHeader();
            
            $http.delete('experiments/' + item._id, httpCfg)
                    .then(
                        function successCallback(successResponse){
                            $rootScope.addAlert({ type:'success', msg: successResponse.data.message });
                            $state.reload();
                        },
                        function failCallback(failResponse){
                            $rootScope.addAlert({ type:'danger', msg: successResponse.data.message })
                        });
        }

        self.edit = function(item) {
            console.log('edit');
            $state.go('edit', {id: item._id});
            console.log(item);
        };

        self.copy = function() {
            popNewAlert('copy target experiment to create my own function is under development!');
        };


        self.popDetail = function(item){
            $http.get('experiments/' + item._id)
            .then(
                function successCallBack(response){
                    popDetailWindow(response.data);
                },
                function failCallback(response){
                    
                }
            );
        }

        function popDetailWindow(content) {
            var modalInstance = $uibModal.open({
                animation: true,
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                templateUrl: 'components/modal/investigation-modal.template.html',
                controller: 'InvestigationModalInstanceCtrl',
                controllerAs: '$ctrl',
                size: 'lg',
                resolve: {
                    content: function () {
                        return content.data;
                    }
                }
            });

            modalInstance.result
                .then(
                    function closeDone() {
                    },
                    function dismissDone() {
                        console.log('Modal dismissed at: ' + new Date());
                    }
                );
        };

        function popNewAlert(content) {
            var modalInstance = $uibModal.open({
                animation: true,
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                templateUrl: 'components/modal/modal.template.html',
                controller: 'AlertModalInstanceCtrl',
                controllerAs: '$ctrl',
                size: 'sm',
                resolve: {
                    content: function () {
                        return content;
                    }
                }
            });

            modalInstance.result
                .then(
                    function closeDone() {
                    },
                    function dismissDone() {
                        console.log('Modal dismissed at: ' + new Date());
                    }
                );
        };

    }]
});


'use strict';

angular.module('snaplab.investigations')
.component('investigationsFinder', {
    templateUrl: 'components/investigations/investigations-finder.template.html',
    controller: ['$http', function($http){
        var self =this;
        self.dtEnd = new Date();
        self.dtStart = new Date(new Date().setDate(self.dtEnd.getDate()-20));

        self.searchContent = '';

        self.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
        };

        self.sortType = '-lastupdated';

        self.search = function (type) {
            var searchContent = self.searchContent;
            var dtStart = self.dtStart;
            var dtEnd = self.dtEnd;
            var sortType = self.sortType;

            console.log(type + ":" + searchContent + ":"
                + dtStart + ":" + dtEnd + ":" + sortType);

            var httpCfg = {
                params: {
                    afterDate: dtStart,
                    beforeDate: dtEnd,
                    sort: sortType,
                    query: searchContent,
                    fields: type
                }
            };
            $http.get('experiments', httpCfg)
                .then(function (response) {
                    self.initData = response.data;
                });

        };

        self.openDatePicker = function (picker) {
            if (picker == 'start') {
                self.dtStartStatus = true;
            } else {
                self.dtEndStatus = true;
            }

        };

    }]
});




'use strict';

angular.module('snaplab.modal', ['snaplab.core.auth']);
'use strict';

angular.module('snaplab.modal').controller('AlertModalInstanceCtrl', function ($uibModalInstance, content) {
    var $ctrl = this;
    $ctrl.content = content;
    $ctrl.ok = function () {
        $uibModalInstance.dismiss();
    };
});

'use strict';

angular.module('snaplab.modal').controller('TuneModalInstanceCtrl', function ($uibModalInstance, item) {
    var self = this;

    item.parameters.forEach(function(parameter){
        if(parameter.field.indexOf('row')>=0){
            self.row = parameter.value;
        }
        if(parameter.field.indexOf('col')>=0){
            self.col = parameter.value;
        }
        if(parameter.field.indexOf('ambient')>=0){
            self.ambientTemperature = parameter.value;
        }
        if(parameter.field.indexOf('IR')>=0){
            self.irTemperature = parameter.value;
        }
        if(parameter.field.indexOf('captureOnClick')>=0){
            self.captureOnClick = parameter.value;
        }
        if(parameter.field.indexOf('gridTitle')>=0){
            self.gridTitle = parameter.value;
        }
        if(parameter.field.indexOf('graphTitle')>=0){
            self.graphTitle = parameter.value;
        }
        if(parameter.field.indexOf('xyz')>=0){
            self.xyzValue = parameter.value;
        }
        if(parameter.field.indexOf('scalar')>=0){
            self.scalarValue = parameter.value;
        }
    });

    self.aiShow = false;
    self.zyxShow = false;

    switch(item.class){
        case 'Temperature': self.aiShow = true;break;
        case 'Humidity':
        case 'Barometer':
        case 'Gyroscope':
        case 'Luxometer': break;
        case 'Accelerometer':
        case 'Magnetometer': self.xyzShow = true;break;
    }

    self.ok = function () {

        if(item.type == 'Grid'){
            self.row = self.row || 4;
            self.col = self.col || 4;
            var oldName =item.name;
            var cutPos = oldName.indexOf(" ");
            var newName = self.row + "x" + self.col + " " + oldName.substr(cutPos);
            item.name = newName;
            item.parameters.forEach(function(parameter){
                if(parameter.field.indexOf('row')>=0){
                    parameter.value = self.row;
                    console.log('set row');
                }
                if(parameter.field.indexOf('col')>=0){
                    parameter.value = self.col;
                    console.log('set col');
                }
            });
        }

        if(self.ambientTemperature){
            item.parameters.push(
                {
                    field: item.class + '.' + 'parameters' + '.' + 'ambient', 
                    value: self.ambientTemperature
                });
        }

        if(self.irTemperature){
            item.parameters.push(
                {
                    field: item.class + '.' + 'parameters' + '.' + 'IR', 
                    value: self.irTemperature
                });
        }

        if(self.xyzValue){
            item.parameters.push(
                {
                    field: item.class + '.' + 'parameters' + '.' + 'xyz', 
                    value: self.xyzValue
                });
        }

        if(self.scalarValue){
            item.parameters.push(
                {
                    field: item.class + '.' + 'parameters' + '.' + 'scalar', 
                    value: self.scalarValue
                }); 
        }

        
        if(self.graphTitle){
            item.parameters.push(
                    {
                        field: item.class + '.' + item.type.toLowerCase() + '.' + 'graphTitle', 
                        value: self.graphTitle
                    });
        }
        if(self.gridTitle){
            item.parameters.push(
                {
                    field: item.class + '.' + item.type.toLowerCase() + '.' + 'gridTitle', 
                    value: self.gridTitle
                });
        }
        if(self.captureOnClick){
            item.parameters.push(
                {
                    field: item.class + '.' + 'captureOnClick', 
                    value: self.captureOnClick
                });
        }
        
        $uibModalInstance.close();
    };
    self.cancel = function () {
        $uibModalInstance.dismiss();
    }
});

'use strict';

angular.module('snaplab.modal').controller('InvestigationModalInstanceCtrl', function ($uibModalInstance, content) {
    var $ctrl = this;
    $ctrl.content = content;
    $ctrl.ok = function () {
        $uibModalInstance.dismiss();
    };
});

'use strict';

angular.module('snaplab.myworks', [
    'snaplab.core.auth'
]);
'use strict';

angular.module('snaplab.myworks')
.component('myworks', {
    templateUrl:'components/myworks/myworks.template.html',
    controller:['auth', function(auth){

    }]
});
'use strict';

angular.module('snaplab.myworks')
.component('myworksEdit', {
    templateUrl:'components/myworks/myworks-edit.template.html',
    controller:['auth', function(auth){

    }]
});
'use strict';

angular.module('snaplab.navigation', [
    'snaplab.core.auth',
    'ui.router'
]);
'use strict';

angular.module('snaplab.navigation')
.component('navigation', {
    templateUrl:'components/navigation/navigation.template.html',
    controller: ['$rootScope', 'auth', '$scope', '$state', function ($rootScope, auth, $scope, $state) {
        var self = this;

        if($rootScope.isLogin){
            self.isLogin = true;
            $rootScope.user = auth.getLoginUser();
            self.user = $rootScope.user;
        }else{
            self.isLogin = false;
        }
        $scope.$watch('$root.isLogin', function(){
            if($rootScope.isLogin){
                self.isLogin = true;
                $rootScope.user = auth.getLoginUser();
                self.user = $rootScope.user;
            }else{
                self.isLogin = false;
            }
        });


        self.isNavCollapsed = true;

        self.navCollapsedTrigger = function(){
            self.isNavCollapsed = !self.isNavCollapsed;
        };


        self.logout = function(){
            auth.logout();
            $rootScope.isLogin = false;
            $state.go('welcome');
        }
    }]
});
'use strict';

angular.module('snaplab.notification', [
]);
'use strict';

angular.module('snaplab.notification')
.component('notification', {
    templateUrl: 'components/notification/notification.template.html',
    controller: ['$rootScope', function ($rootScope) {
        var self = this;

        self.alerts = [
            { type: 'warning', msg: 'This website is for Test only' }
        ];

        $rootScope.addAlert = function(content) {
            self.alerts.pop();
            self.alerts.push(content);
        };

        self.closeAlert = function(index) {
            self.alerts.splice(index, 1);
        };
    }]
});
'use strict';

angular.module('snaplab.profile', [
    'snaplab.core.auth'
]);
'use strict';

angular.module('snaplab.profile')
.component('profile', {
    templateUrl:'components/profile/profile.template.html',
    controller: ['$rootScope','$http', '$uibModal', 'auth', function ($rootScope, $http, $uibModal, auth) {
        var self = this;

        var user = auth.getLoginUser();
        self.email = user.email;
        self.name = user.name;

        function popNewAlert(content) {
            var modalInstance = $uibModal.open({
                animation: true,
                ariaLabelledBy: 'modal-title',
                ariaDescribedBy: 'modal-body',
                templateUrl: 'components/modal/modal.template.html',
                controller: 'AlertModalInstanceCtrl',
                controllerAs: '$ctrl',
                size: 'sm',
                resolve: {
                    content: function () {
                        return content;
                    }
                }
            });

            modalInstance.result
                .then(
                    function closeDone() {
                    },
                    function dismissDone() {
                        console.log('Modal dismissed at: ' + new Date());
                    }
                );
        };

        self.updateProfile = function() {

            if(angular.isUndefined(self.name)){
                popNewAlert('new name required');
                return;
            }

            var postCfg = {};
            postCfg.headers = auth.genHeader();

            $http.post('profiles/' + user.id, {name: self.name}, postCfg)
                .then(
                    function successCallback(successResponse){
                        $rootScope.addAlert({ type:'success', msg: successResponse.data.message });
                    },
                    function failCallback(failResponse){
                        $rootScope.addAlert({ type:'danger', msg: successResponse.data.message })
                    }
                );

        };

        self.updatePassword = function(){
            var postCfg = {};
            postCfg.headers = auth.genHeader();

            var validJudge = angular.isDefined(self.cPassword) && angular.isDefined(self.nPassword) && self.nPassword == self.nPassword2;
            if(!validJudge){
                popNewAlert('input has conflict');
                return;
            }

            $http.post('profiles/' + user.id + '/password', {cPassword: self.cPassword, nPassword: self.nPassword}, postCfg)
                .then(
                    function successCallback(successResponse){
                        $rootScope.addAlert({ type:'success', msg: successResponse.data.message });
                    },
                    function failCallback(failResponse){
                        $rootScope.addAlert({ type:'danger', msg: successResponse.data.message });
                    }
                );

        }
    }]
});
'use strict';

angular.module('snaplab.welcome', []);
'use strict';

angular.module('snaplab.welcome')
.component('welcome', {
    templateUrl:'components/welcome/welcome.template.html'
});